process.env.PORT = 2000 + Math.floor(Math.random() * 10000)

const Logger = require('../utils/Logger');
const request = require('supertest');
const app = require('../../index.js');
const jwt = require('jsonwebtoken');


    function randomString(length) {
        return crypto.randomBytes(length).toString('hex');
    }



var privateKey = null;
var publicKey = null;

describe('/auth', () => {
    
    beforeAll(async () => {                
        //let keys = generateRSAJWT('test-org', )

        const response = await request(app).get("/auth/keys");
        
        expect(response.status).toEqual(200)
        expect(response.type).toEqual("application/json")
        expect(response.body.public).toMatch(/(BEGIN PUBLIC KEY)/i)
        expect(response.body.public).toMatch(/(END PUBLIC KEY)/i)
        expect(response.body.private).toMatch(/(BEGIN PRIVATE KEY)/i)
        expect(response.body.private).toMatch(/(END PRIVATE KEY)/i)

        privateKey = response.body.public;
        publicKey = response.body.private;
    });

    test('GET /auth/token', async () => {
            
        // Create a test RSA JWT token using RS384

        // A JWT signed with the client’s private key and containing the following claims:
        // iss (string) — The issuer, which must be the client_id.
        // sub (string) — The subject, which must also be the client_id.
        // aud (string) — The audience, which should be the URL of the token endpoint, for
        //                example: https://idp.int.identitysandbox.gov/api/openid_connect/token
        // jti (string) — The JWT ID, a unique identifier for the token which can be used to prevent
        //                reuse of the token. Should be an un-guessable, random string generated by the client.
        // exp (number) — The expiration time for this token. Should be an integer timestamp (number of seconds since
        //                the Unix Epoch) and be a short period of time in the future (such as 5 minutes from now).
        let claims = {
            iss: 'test-org-name',
            sub: 'test-org-name',
            aud: 'http://localhost:7071/auth/token',
            exp: Math.round(Date.now()/1000) + parseInt(300),
            jti: randomString(32)
        };

        // https://github.com/auth0/node-jsonwebtoken

        const signedClaims = jwt.sign(claims, privateKey, {
            algorithm: 'RS384'
        });
        
		let opts = {
            grant_type: 'client_credentials',
            scope: [],
			client_assertion_type: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer',
			client_assertion: signedClaims,
			exp: claims.exp
		};

        const response = await request(app)
            .post("/auth/token")
            .send(opts)

        Logger.debug(response.body);

        expect(response.status).toEqual(200)
        expect(response.type).toEqual("application/json")
    
    });

});